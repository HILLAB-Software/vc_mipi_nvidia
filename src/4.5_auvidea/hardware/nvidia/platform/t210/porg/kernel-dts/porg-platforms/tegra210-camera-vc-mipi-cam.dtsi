/*
 * Copyright (c) 2018-2019, NVIDIA CORPORATION.  All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <dt-bindings/media/camera.h>
#include <dt-bindings/platform/t210/t210.h>

#define VC_MIPI_CAM_AB  1
#define VC_MIPI_CAM_CD  1
#define VC_MIPI_CAM_E   0
#define VC_MIPI_CAM_F   0
#define VC_MIPI_CAMERAS 2

#define VC_MIPI_LANES   4
#if VC_MIPI_LANES == 1
    #define BUS_WIDTH 1
    #define NUM_LANES "1" 
    #define NUM_CSI_LANES 2
#endif
#if VC_MIPI_LANES == 2
    #define BUS_WIDTH 2
    #define NUM_LANES "2" 
    #define NUM_CSI_LANES 4
#endif
#if VC_MIPI_LANES == 4
    #define BUS_WIDTH 4
    #define NUM_LANES "4" 
    #define NUM_CSI_LANES 8
#endif
 
/ {
    host1x {
        vc_mipi_vi_base: vi {
            num-channels = <VC_MIPI_CAMERAS>;
            #address-cells = <1>;
            #size-cells = <0>;
            ports {
                #address-cells = <1>;
                #size-cells = <0>;
#if VC_MIPI_CAM_AB == 1
                vc_mipi_vi_port0: port@0 {
                    reg = <0>;
                    vc_mipi_vi_in0: endpoint {
                        port-index = <0>;
                        bus-width = <BUS_WIDTH>;
                        remote-endpoint = <&vc_mipi_csi_out0>;
                    };
                };
#endif
#if VC_MIPI_CAM_CD == 1
                vc_mipi_vi_port1: port@1 {
                    reg = <1>;
                    vc_mipi_vi_in1: endpoint {
                        port-index = <2>;
                        bus-width = <BUS_WIDTH>;
                        remote-endpoint = <&vc_mipi_csi_out1>;
                    };
                };
#endif
#if VC_MIPI_CAM_E == 1
                vc_mipi_vi_port2: port@2 {
                    reg = <2>;
                    vc_mipi_vi_in2: endpoint {
                        port-index = <4>;
                        bus-width = <BUS_WIDTH>;
                        remote-endpoint = <&vc_mipi_csi_out2>;
                    };
                };
#endif
#if VC_MIPI_CAM_F == 1
                vc_mipi_vi_port3: port@3 {
                    reg = <3>;
                    vc_mipi_vi_in3: endpoint {
                        port-index = <6>;
                        bus-width = <BUS_WIDTH>;
                        remote-endpoint = <&vc_mipi_csi_out3>;
                    };
                };
#endif
            };
        };
 
        vc_mipi_csi_base: nvcsi {
            num-channels = <VC_MIPI_CAMERAS>;
            #address-cells = <1>;
            #size-cells = <0>;
#if VC_MIPI_CAM_AB == 1
            vc_mipi_csi_chan0: channel@0 {
                reg = <0>;
                ports {
                    #address-cells = <1>;
                    #size-cells = <0>;
                    vc_mipi_csi_chan0_port0: port@0 {
                        reg = <0>;
                        vc_mipi_csi_in0: endpoint@0 {
                            port-index = <0>;
                            bus-width = <BUS_WIDTH>;
                            remote-endpoint = <&vc_mipi_out0>;
                        };
                    };
                    vc_mipi_csi_chan0_port1: port@1 {
                        reg = <1>;
                        vc_mipi_csi_out0: endpoint@1 {
                            remote-endpoint = <&vc_mipi_vi_in0>;
                        };
                    };
                };
            };
#endif
#if VC_MIPI_CAM_CD == 1
            vc_mipi_csi_chan1: channel@1 {
                reg = <1>;
                ports {
                    #address-cells = <1>;
                    #size-cells = <0>;
                    vc_mipi_csi_chan1_port0: port@2 {
                        reg = <0>;
                        vc_mipi_csi_in1: endpoint@2 {
                            port-index = <2>;
                            bus-width = <BUS_WIDTH>;
                            remote-endpoint = <&vc_mipi_out1>;
                        };
                    };
                    vc_mipi_csi_chan1_port1: port@3 {
                        reg = <1>;
                        vc_mipi_csi_out1: endpoint@3 {
                            remote-endpoint = <&vc_mipi_vi_in1>;
                        };
                    };
                };
            };
#endif
#if VC_MIPI_CAM_E == 1
            vc_mipi_csi_chan2: channel@2 {
                reg = <2>;
                ports {
                    #address-cells = <1>;
                    #size-cells = <0>;
                    vc_mipi_csi_chan2_port0: port@4 {
                        reg = <0>;
                        vc_mipi_csi_in2: endpoint@4 {
                            port-index = <4>;
                            bus-width = <BUS_WIDTH>;
                            remote-endpoint = <&vc_mipi_out2>;
                        };
                    };
                    vc_mipi_csi_chan2_port1: port@5 {
                        reg = <1>;
                        vc_mipi_csi_out2: endpoint@5 {
                            remote-endpoint = <&vc_mipi_vi_in2>;
                        };
                    };
                };
            };
 #endif
 #if VC_MIPI_CAM_F == 1
            vc_mipi_csi_chan3: channel@3 {
                reg = <3>;
                ports {
                    #address-cells = <1>;
                    #size-cells = <0>;
                    vc_mipi_csi_chan3_port0: port@6 {
                        reg = <0>;
                        vc_mipi_csi_in3: endpoint@6 {
                            port-index = <6>;
                            bus-width = <BUS_WIDTH>;
                            remote-endpoint = <&vc_mipi_out3>;
                        };
                    };
                    vc_mipi_csi_chan3_port1: port@7 {
                        reg = <1>;
                        vc_mipi_csi_out3: endpoint@7 {
                            remote-endpoint = <&vc_mipi_vi_in3>;
                        };
                    };
                };
            };
#endif
        };

#if VC_MIPI_CAM_AB == 1
        vc_mipi_i2c_0: i2c@546c0000 {
            vc_mipi_cam0: vc_mipi@1a {           
                compatible              = "vc,vc_mipi";                   
                reg                     = <0x1a>;
                devnode                 = "video0";
                use_sensor_mode_id      = "false";
                num_lanes               = NUM_LANES;
                trigger-mode            = "0";
                flash-mode              = "0";
 
                 // This node is needed by the Tegra framework. 
                // All properties are set by the driver on runtime.
                mode0 { 
                    num_lanes                = NUM_LANES;
                    tegra_sinterface         = "serial_a";
                    phy_mode                 = "DPHY";

                    // A Boolean; indicates whether the sensor is programmed to use a 
                    // discontinuous clock on MIPI lanes.
                    discontinuous_clk        = "no";
                    // sensor_common.c -> signal->mclk_freq = value; (read_property_u32)
                    // s_data->def_clk_freq = signal_props->mclk_freq * 1000;
                    // camera_common.c -> camera_common_mclk_enable
                    //                 -> clk_set_rate -> clk_prepare_enable
                    mclk_khz                 = "24000"; 
                    // Sensor pixel clock for calculating exposure, frame rate, etc.
                    pix_clk_hz               = "800000000";
                    // THS settle time of the MIPI lane, in nanoseconds. Calculate the range 
                    // of acceptable values with the appropriate formula.
                    cil_settletime           = "0";

                    // (not implemented) A Boolean; specifies whether to enable DPCM compression for this mode.
                    // dpcm_enable              = "false";
                    // (not implemented) MCLK multiplier for timing the capture sequence of the
                    // mclk_multiplier          = "9.33";

                    inherent_gain            = "1";
                    min_hdr_ratio            = "1";
                    max_hdr_ratio            = "1";
                    readout_orientation      = "0";

                    active_w                 = "0";
                    active_h                 = "0";
                    line_length              = "0";
                    pixel_t                  = "bayer_rggb10";

                    gain_factor              = "1";
                    min_gain_val             = "0"; 
                    max_gain_val             = "1"; 
                    step_gain_val            = "1"; 
                    default_gain             = "0"; 

                    exposure_factor          = "1"; 
                    min_exp_time             = "0";
                    max_exp_time             = "1";
                    step_exp_time            = "1";
                    default_exp_time         = "0";

                    framerate_factor         = "1";
                    min_framerate            = "0";
                    max_framerate            = "1";
                    step_framerate           = "1";
                    default_framerate        = "0";

                    embedded_metadata_height = "0";    
                };

                ports {
                    #address-cells = <1>;
                    #size-cells = <0>;

                    port@0 {
                        reg = <0>;
                        vc_mipi_out0: endpoint {
                            port-index = <0>;
                            bus-width = <BUS_WIDTH>;
                            remote-endpoint = <&vc_mipi_csi_in0>;
                        };
                    };
                };
            };
        };
#endif
#if VC_MIPI_CAM_CD == 1
        vc_mipi_i2c_1: i2c@7000c000 {
            vc_mipi_cam1: vc_mipi@1a {
                compatible              = "vc,vc_mipi";              
                reg                     = <0x1a>;
                devnode                 = "video1";
                use_sensor_mode_id      = "false";
                num_lanes               = NUM_LANES;
                trigger-mode            = "0";
                flash-mode              = "0";
                
                // This node is needed by the Tegra framework. 
                // All properties are set by the driver on runtime.
                mode0 { 
                    num_lanes                = NUM_LANES;
                    tegra_sinterface         = "serial_c";
                    phy_mode                 = "DPHY";

                    discontinuous_clk        = "no";
                    mclk_khz                 = "24000";
                    pix_clk_hz               = "800000000";
                    cil_settletime           = "0";

                    // mclk_multiplier          = "9.33";
                    // dpcm_enable              = "false";

                    inherent_gain            = "1";
                    min_hdr_ratio            = "1";
                    max_hdr_ratio            = "1";
                    readout_orientation      = "0";

                    active_w                 = "0";
                    active_h                 = "0";
                    line_length              = "0";
                    pixel_t                  = "bayer_rggb10";

                    gain_factor              = "1";
                    min_gain_val             = "0"; 
                    max_gain_val             = "1"; 
                    step_gain_val            = "1"; 
                    default_gain             = "0"; 

                    exposure_factor          = "1"; 
                    min_exp_time             = "0";
                    max_exp_time             = "1";
                    step_exp_time            = "1";
                    default_exp_time         = "0";

                    framerate_factor         = "1";
                    min_framerate            = "0";
                    max_framerate            = "1";
                    step_framerate           = "1";
                    default_framerate        = "0";

                    embedded_metadata_height = "0";    
                };

                ports {
                    #address-cells = <1>;
                    #size-cells = <0>;

                    port@0 {
                        reg = <0>;
                        vc_mipi_out1: endpoint {
                            port-index = <2>;
                            bus-width = <BUS_WIDTH>;
                            remote-endpoint = <&vc_mipi_csi_in1>;
                        };
                    };
                };
            };
        };
#endif
    };
      
#if VC_MIPI_CAM_E == 1
    vc_mipi_i2c_2: i2c@7000c400 {
        vc_mipi_cam2: vc_mipi@1a {
            compatible              = "vc,vc_mipi";              
            reg                     = <0x1a>;
            devnode                 = "video2";
            use_sensor_mode_id      = "false";
            num_lanes               = NUM_LANES;
            trigger-mode            = "0";
            flash-mode              = "0";

            // This node is needed by the Tegra framework. 
            // All properties are set by the driver on runtime.
            mode0 { 
                num_lanes                = NUM_LANES;
                tegra_sinterface         = "serial_e";
                phy_mode                 = "DPHY";

                discontinuous_clk        = "no";
                mclk_khz                 = "24000";
                pix_clk_hz               = "800000000";
                cil_settletime           = "0";

                // mclk_multiplier          = "9.33";
                // dpcm_enable              = "false";

                inherent_gain            = "1";
                min_hdr_ratio            = "1";
                max_hdr_ratio            = "1";
                readout_orientation      = "0";

                active_w                 = "0";
                active_h                 = "0";
                line_length              = "0";
                pixel_t                  = "bayer_rggb10";

                gain_factor              = "1";
                min_gain_val             = "0"; 
                max_gain_val             = "1"; 
                step_gain_val            = "1"; 
                default_gain             = "0"; 

                exposure_factor          = "1"; 
                min_exp_time             = "0";
                max_exp_time             = "1";
                step_exp_time            = "1";
                default_exp_time         = "0";

                framerate_factor         = "1";
                min_framerate            = "0";
                max_framerate            = "1";
                step_framerate           = "1";
                default_framerate        = "0";

                embedded_metadata_height = "0";    
            };

            ports {
                #address-cells = <1>;
                #size-cells = <0>;

                port@0 {
                    reg = <0>;
                    vc_mipi_out2: endpoint {
                        port-index = <4>;
                        bus-width = <BUS_WIDTH>;
                        remote-endpoint = <&vc_mipi_csi_in2>;
                    };
                };
            };
        };
    };
#endif
#if VC_MIPI_CAM_F == 1
    vc_mipi_i2c_3: i2c@7000c500 {
        vc_mipi_cam3: vc_mipi@1a {
            compatible              = "vc,vc_mipi";              
            reg                     = <0x1a>;
            devnode                 = "video3";
            use_sensor_mode_id      = "false";
            num_lanes               = NUM_LANES;
            trigger-mode            = "0";
            flash-mode              = "0";

            // This node is needed by the Tegra framework. 
            // All properties are set by the driver on runtime.
            mode0 { 
                num_lanes                = NUM_LANES;
                tegra_sinterface         = "serial_f";
                phy_mode                 = "DPHY";

                discontinuous_clk        = "no";
                mclk_khz                 = "24000";
                pix_clk_hz               = "800000000";
                cil_settletime           = "0";

                // mclk_multiplier          = "9.33";
                // dpcm_enable              = "false";

                inherent_gain            = "1";
                min_hdr_ratio            = "1";
                max_hdr_ratio            = "1";
                readout_orientation      = "0";

                active_w                 = "0";
                active_h                 = "0";
                line_length              = "0";
                pixel_t                  = "bayer_rggb10";

                gain_factor              = "1";
                min_gain_val             = "0"; 
                max_gain_val             = "1"; 
                step_gain_val            = "1"; 
                default_gain             = "0"; 

                exposure_factor          = "1"; 
                min_exp_time             = "0";
                max_exp_time             = "1";
                step_exp_time            = "1";
                default_exp_time         = "0";

                framerate_factor         = "1";
                min_framerate            = "0";
                max_framerate            = "1";
                step_framerate           = "1";
                default_framerate        = "0";

                embedded_metadata_height = "0";    
            };

            ports {
                #address-cells = <1>;
                #size-cells = <0>;

                port@0 {
                    reg = <0>;
                    vc_mipi_out3: endpoint {
                        port-index = <6>;
                        bus-width = <BUS_WIDTH>;
                        remote-endpoint = <&vc_mipi_csi_in3>;
                    };
                };
            };
        };
    };
#endif

    lens_vc_mipi@RBPCV2 {
        min_focus_distance  = "0.0";
        hyper_focal         = "0.0";
        focal_length        = "1.0";
        f_number            = "2.0";
        aperture            = "0.0";
    };
};

/ {
    vc_mipi_tcp: tegra-camera-platform {
        compatible = "nvidia, tegra-camera-platform";

        // vi_iso_bw = ((num_csi_lanes * max_lane_speed) / bits_per_pixel)
		//             * vi_bpp * (100 + vi_margin_pct) / 100;
        num_csi_lanes = <NUM_CSI_LANES>;
        max_lane_speed = <1500000>;
        min_bits_per_pixel = <10>;
        vi_peak_byte_per_pixel = <2>;
        vi_bw_margin_pct = <25>;
        // isp_iso_bw = max_pixel_rate * isp_bpp * (100 + isp_margin_pct) / 100;
        max_pixel_rate = <160000>;
        isp_peak_byte_per_pixel = <5>;
        isp_bw_margin_pct = <25>;

        /**
         * The general guideline for naming badge_info contains 3 parts, and is as follows,
         * The first part is the camera_board_id for the module; if the module is in a FFD
         * platform, then use the platform name for this part.
         * The second part contains the position of the module, ex. "rear" or "front".
         * The third part contains the last 6 characters of a part number which is found
         * in the module's specsheet from the vendor.
         */
        modules {
#if VC_MIPI_CAM_AB == 1
            vc_mipi_cam_module0: module0 {
                badge = "porg_topleft_RBPCV2";
                position = "topleft";
                orientation = "1";
                vc_mipi_cam_module0_drivernode0: drivernode0 {
                    pcl_id = "v4l2_sensor";
                    devname = "vc-mipi 6-001a";
                    proc-device-tree = "/proc/device-tree/host1x/i2c@546c0000/vc_mipi@1a";
                };
                vc_mipi_cam_module0_drivernode1: drivernode1 {
                    pcl_id = "v4l2_lens";
                    proc-device-tree = "/proc/device-tree/lens_vc_mipi@RBPCV2/";
                };
            };
#endif
#if VC_MIPI_CAM_CD == 1
            vc_mipi_cam_module1: module1 {
                badge = "porg_topright_RBPCV2";
                position = "topright";
                orientation = "1";
                vc_mipi_cam_module1_drivernode0: drivernode0 {
                    pcl_id = "v4l2_sensor";
                    devname = "vc-mipi 0-001a";
                    proc-device-tree = "/proc/device-tree/host1x/i2c@7000c000/vc_mipi@1a";
                };
                vc_mipi_cam_module1_drivernode1: drivernode1 {
                    pcl_id = "v4l2_lens";
                    proc-device-tree = "/proc/device-tree/lens_vc_mipi@RBPCV2/";
                };
            };
#endif
#if VC_MIPI_CAM_E == 1
            vc_mipi_cam_module2: module2 {
                badge = "porg_bottomleft_RBPCV2";
                position = "bottomleft";
                orientation = "1";
                vc_mipi_cam_module2_drivernode0: drivernode0 {
                    status = "okay";
                    pcl_id = "v4l2_sensor";
                    devname = "vc_mipi 1-001a";
                    proc-device-tree = "/proc/device-tree/i2c@7000c400/vc_mipi@1a";
                };
                vc_mipi_cam_module2_drivernode1: drivernode1 {
                    status = "okay";
                    pcl_id = "v4l2_lens";
                    proc-device-tree = "/proc/device-tree/lens_vc_mipi@RBPCV2/";
                };
            };
#endif
#if VC_MIPI_CAM_F == 1
            vc_mipi_cam_module3: module3 {
                badge = "porg_bottomright_RBPCV2";
                position = "bottomright";
                orientation = "1";
                vc_mipi_cam_module3_drivernode0: drivernode0 {
                    status = "okay";
                    pcl_id = "v4l2_sensor";
                    devname = "vc_mipi 2-001a";
                    proc-device-tree = "/proc/device-tree/i2c@7000c500/vc_mipi@1a";
                };
                vc_mipi_cam_module3_drivernode1: drivernode1 {
                    status = "okay";
                    pcl_id = "v4l2_lens";
                    proc-device-tree = "/proc/device-tree/lens_vc_mipi@RBPCV2/";
                };
            };
#endif
        };
    };
};

#define CAM1_PWDN       TEGRA_GPIO(S, 7)
#define CAM2_PWDN       TEGRA_GPIO(T, 0)
#define CAM3_PWDN		TEGRA_GPIO(S, 5)
#define CAM4_PWDN		TEGRA_GPIO(T, 1)
#define CAM_TRIGGER		TEGRA_GPIO(V, 0)

/ {
    host1x {
#if VC_MIPI_CAM_AB == 1
        i2c@546c0000 {
            status = "okay";
                vc_mipi@1a {
                status = "okay";
                reset-gpios = <&gpio CAM1_PWDN GPIO_ACTIVE_HIGH>;
            };
        };
#endif
#if VC_MIPI_CAM_CD == 1
        i2c@7000c000 {
            status = "okay";
                vc_mipi@1a {
                status = "okay";
                reset-gpios = <&gpio CAM2_PWDN GPIO_ACTIVE_HIGH>;
            };
        };
#endif
    };

#if VC_MIPI_CAM_E == 1
    i2c@7000c400 {
        status = "okay";
        vc_mipi@1a {
            status = "okay";
            reset-gpios = <&gpio CAM3_PWDN GPIO_ACTIVE_HIGH>;
        };
    };
#endif
#if VC_MIPI_CAM_F == 1
    i2c@7000c500 {
        status = "okay";
        vc_mipi@1a {
            status = "okay";
            reset-gpios = <&gpio CAM4_PWDN GPIO_ACTIVE_HIGH>;
        };
    };
#endif

    gpio@6000d000 {
        camera-trigger-high {
            status = "okay";
            gpio-hog;
            output-high;
            gpios = <CAM_TRIGGER 0>;
            label = "cam-trigger";
        };
 
        camera-control-output-low {
            gpio-hog;
            output-low;
            gpios = < CAM1_PWDN 0  CAM2_PWDN 0>;
            label = "cam1-pwdn", "cam2-pwdn";
        };
    };
};