/*
 * Copyright (c) 2018-2019, NVIDIA CORPORATION.  All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <dt-bindings/media/camera.h>

// ------------------------------------------------------------------------------------------------
//  Driver Configuration
// ------------------------------------------------------------------------------------------------
#define VC_MIPI_CAM_AB      1   // 0: Disabled, 1: Enabled
#define VC_MIPI_CAM_CD      1   // 0: Disabled, 1: Enabled
#define VC_MIPI_CAM_E       0   // 0: Disabled, 1: Enabled
#define VC_MIPI_CAM_F       0   // 0: Disabled, 1: Enabled
#define VC_MIPI_LANES       4   // 1, 2, 4 Lanes
#define VC_MIPI_OMNI_VISION 0   // 0: Sony Sensor, 1: Omni Vision Sensor
// ------------------------------------------------------------------------------------------------

#if VC_MIPI_LANES == 1
    #define BUS_WIDTH 1
    #define NUM_LANES "1" 
    #define NUM_CSI_LANES 2
#endif
#if VC_MIPI_LANES == 2
    #define BUS_WIDTH 2
    #define NUM_LANES "2" 
    #define NUM_CSI_LANES 4
#endif
#if VC_MIPI_LANES == 4
    #define BUS_WIDTH 4
    #define NUM_LANES "4" 
    #define NUM_CSI_LANES 8
#endif

#if VC_MIPI_CAM_AB == 1 && VC_MIPI_CAM_CD == 1
    #define VC_MIPI_CAMERAS 2
#else
    #define VC_MIPI_CAMERAS 1
#endif

/ {
	host1x {
		vi@15c10000  {
			num-channels = <VC_MIPI_CAMERAS>;
			status="okay";
			ports {
				status="okay";
				#address-cells = <1>;
				#size-cells = <0>;
#if VC_MIPI_CAM_AB == 1
				vi_port0: port@0 {
					status="okay";
					reg = <0>;
					vc_mipi_vi_in0: endpoint {
						status="okay";
						vc-id=<0>;
						port-index = <0>;
						bus-width = <BUS_WIDTH>;
						remote-endpoint = <&vc_mipi_csi_out0>;
					};
				};
#endif
#if VC_MIPI_CAM_CD == 1
				vi_port1: port@1 {
					status="okay";
					reg = <1>;
					vc_mipi_vi_in1: endpoint {
						status="okay";
						vc-id=<1>;
						port-index = <4>;
						bus-width = <BUS_WIDTH>;
						remote-endpoint = <&vc_mipi_csi_out1>;
					};
				};
#endif
#if VC_MIPI_CAM_E == 1
				vi_port2: port@2 {
					status="okay";
					reg = <2>;
					vc_mipi_vi_in2: endpoint {
						status="okay";
						vc-id=<2>;
						port-index = <2>;
						bus-width = <BUS_WIDTH>;
						remote-endpoint = <&vc_mipi_csi_out2>;
					};
				};
#endif
#if VC_MIPI_CAM_F == 1
				vi_port3: port@3 {
					status="okay";
					reg = <3>;
					vc_mipi_vi_in3: endpoint {
						status="okay";
						vc-id=<3>;
						port-index = <3>;
						bus-width = <BUS_WIDTH>;
						remote-endpoint = <&vc_mipi_csi_out3>;
					};
				};
#endif
			};
		};

		nvcsi@15a00000 {
			status="okay";
			num-channels = <VC_MIPI_CAMERAS>;
			#address-cells = <1>;
			#size-cells = <0>;
#if VC_MIPI_CAM_AB == 1
			csi_chan0: channel@0 {
				status="okay";
				reg = <0>;
				ports {
					status="okay";
					#address-cells = <1>;
					#size-cells = <0>;
					csi_chan0_port0: port@0 {
						status="okay";
						reg = <0>;
						vc_mipi_csi_in0: endpoint@0 {
							status="okay";
							port-index = <0>;
							bus-width = <BUS_WIDTH>;
							remote-endpoint = <&vc_mipi_out0>;
						};
					};
					csi_chan0_port1: port@1 {
						status="okay";
						reg = <1>;
						vc_mipi_csi_out0: endpoint@1 {
							status="okay";
							remote-endpoint = <&vc_mipi_vi_in0>;
						};
					};
				};
			};
#endif
#if VC_MIPI_CAM_CD == 1
			csi_chan1: channel@1 {
				status="okay";
				reg = <1>;
				ports {
					status="okay";
					#address-cells = <1>;
					#size-cells = <0>;
					csi_chan1_port0: port@0 {
						status="okay";
						reg = <0>;
						vc_mipi_csi_in1: endpoint@2 {
							status="okay";
							port-index = <4>;
							bus-width = <BUS_WIDTH>;
							remote-endpoint = <&vc_mipi_out1>;
						};
					};
					csi_chan1_port1: port@1 {
						status="okay";
						reg = <1>;
						vc_mipi_csi_out1: endpoint@3 {
							status="okay";
							remote-endpoint = <&vc_mipi_vi_in1>;
						};
					};
				};
			};
#endif
#if VC_MIPI_CAM_E == 1
			csi_chan2: channel@2 {
				status="okay";
				reg = <2>;
				ports {
					status="okay";
					#address-cells = <1>;
					#size-cells = <0>;
					csi_chan2_port0: port@0 {
						status="okay";
						reg = <0>;
						vc_mipi_csi_in2: endpoint@4 {
							status="okay";
							port-index = <2>;
							bus-width = <1>; // Check this BUS_WIDTH?
							remote-endpoint = <&vc_mipi_out2>;
						};
					};
					csi_chan2_port1: port@1 {
						status="okay";
						reg = <1>;
						vc_mipi_csi_out2: endpoint@5 {
							status="okay";
							remote-endpoint = <&vc_mipi_vi_in2>;
						};
					};
				};
			};
#endif
#if VC_MIPI_CAM_F == 1
			csi_chan3: channel@3 {
				status="okay";
				reg = <3>;
				ports {
					status="okay";
					#address-cells = <1>;
					#size-cells = <0>;
					csi_chan3_port0: port@0 {
						status="okay";
						reg = <0>;
						vc_mipi_csi_in3: endpoint@6 {
							status="okay";
							port-index = <3>;
							bus-width = <1>; // Check this BUS_WIDTH?
							remote-endpoint = <&vc_mipi_out3>;
						};
					};
					csi_chan3_port1: port@1 {
						status="okay";
						reg = <1>;
						vc_mipi_csi_out3: endpoint@7 {
							status="okay";
							remote-endpoint = <&vc_mipi_vi_in3>;
						};
					};
				};
			};
#endif
		};
	};

#if VC_MIPI_CAM_AB == 1
	i2c@3180000 {
		status="okay";
		vc_mipi_cam0: vc_mipi@1a {
			reg                     = <0x1a>;
               		status			= "okay";
	       		compatible              = "nvidia,vc_mipi";
			devnode                 = "video0";
			use_sensor_mode_id      = "false";

			num_lanes               = NUM_LANES;
			trigger_mode            = "0";
			flash_mode              = "0";

			// This settings are needed by the Tegra framework. 
			// They are used to calculate lens distortion.
			sensor_model            = "vc_mipi";
			physical_w              = "6.287";
			physical_h              = "4.712";

			// This node is needed by the Tegra framework.
			// All properties are set by the driver on runtime.
			//
			// If you want to use the GStreamer with nvarguscamerasrc
			// you have to adjust following settings:
			//   - pix_clk_hz
			//   - active_w, active_h, line_length
			//   - pixel_t
			mode0 {
				num_lanes                = NUM_LANES;
				tegra_sinterface         = "serial_a";
				phy_mode                 = "DPHY";

				discontinuous_clk        = "no";
				mclk_khz                 = "24000";
				// 182400000 => Image width is to long! (TEGRA_VI_CSI_ERROR_STATUS: 0x0001, port: 0)
				pix_clk_hz               = "801907200";
				cil_settletime           = "0";

				dpcm_enable              = "false";
				mclk_multiplier          = "9.33";

				inherent_gain            = "1";
				min_hdr_ratio            = "1";
				max_hdr_ratio            = "1";
				readout_orientation      = "0";

				active_w                 = "4032";
				active_h                 = "3040";
				line_length              = "4184";
				pixel_t                  = "bayer_rggb";

				gain_factor              = "1";
				min_gain_val             = "0";
				max_gain_val             = "100000";
				step_gain_val            = "1";
				default_gain             = "0";

				exposure_factor          = "1";
				min_exp_time             = "1";
				max_exp_time             = "100000000";
				step_exp_time            = "1";
				default_exp_time         = "10000";

				framerate_factor         = "1";
				min_framerate            = "0";
				max_framerate            = "1000";
				step_framerate           = "1";
				default_framerate        = "1000";

				embedded_metadata_height = "0";
			};

			ports {
				status="okay";
				#address-cells = <1>;
				#size-cells = <0>;
				port@0 {
					status="okay";
					reg = <0>;
					vc_mipi_out0: endpoint {
						status="okay";
						port-index = <0>;
						bus-width = <2>;
						remote-endpoint = <&vc_mipi_csi_in0>;
					};
				};
			};
		};
	};
#endif
#if VC_MIPI_CAM_CD == 1
	i2c@c240000 {
		status="okay";
		vc_mipi_cam1: vc_mipi@1a {
			reg                     = <0x1a>;
               		status			= "okay";
	       		compatible              = "nvidia,vc_mipi";
			devnode                 = "video0";
			use_sensor_mode_id      = "false";

			num_lanes               = NUM_LANES;
			trigger_mode            = "0";
			flash_mode              = "0";

			// This settings are needed by the Tegra framework. 
			// They are used to calculate lens distortion.
			sensor_model            = "vc_mipi";
			physical_w              = "6.287";
			physical_h              = "4.712";

			// This node is needed by the Tegra framework.
			// All properties are set by the driver on runtime.
			//
			// If you want to use the GStreamer with nvarguscamerasrc
			// you have to adjust following settings:
			//   - pix_clk_hz
			//   - active_w, active_h, line_length
			//   - pixel_t
			mode0 {
				num_lanes                = NUM_LANES;
				tegra_sinterface         = "serial_a";
				phy_mode                 = "DPHY";

				discontinuous_clk        = "no";
				mclk_khz                 = "24000";
				pix_clk_hz               = "801907200";
				cil_settletime           = "0";

				dpcm_enable              = "false";
				mclk_multiplier          = "9.33";

				inherent_gain            = "1";
				min_hdr_ratio            = "1";
				max_hdr_ratio            = "1";
				readout_orientation      = "0";

				active_w                 = "4032";
				active_h                 = "3040";
				line_length              = "4184";
				pixel_t                  = "bayer_rggb";

				gain_factor              = "1";
				min_gain_val             = "0";
				max_gain_val             = "100000";
				step_gain_val            = "1";
				default_gain             = "0";

				exposure_factor          = "1";
				min_exp_time             = "1";
				max_exp_time             = "100000000";
				step_exp_time            = "1";
				default_exp_time         = "10000";

				framerate_factor         = "1";
				min_framerate            = "0";
				max_framerate            = "1000";
				step_framerate           = "1";
				default_framerate        = "1000";

				embedded_metadata_height = "0";
			};

			ports {
				status="okay";
				#address-cells = <1>;
				#size-cells = <0>;
				port@0 {
					status="okay";
					reg = <0>;
					vc_mipi_out1: endpoint {
						status = "okay";
						port-index = <4>;
						bus-width = <2>;
						remote-endpoint = <&vc_mipi_csi_in1>;
					};
				};
			};
		};
	};
#endif
#if VC_MIPI_CAM_E == 1
	i2c@31e0000 {
		status="okay";
		vc_mipi_cam2: vc_mipi@1a {
			reg                     = <0x1a>;
               		status			= "okay";
	       		compatible              = "nvidia,vc_mipi";
			devnode                 = "video0";
			use_sensor_mode_id      = "false";

			num_lanes               = NUM_LANES;
			trigger_mode            = "0";
			flash_mode              = "0";

			// This settings are needed by the Tegra framework. 
			// They are used to calculate lens distortion.
			sensor_model            = "vc_mipi";
			physical_w              = "6.287";
			physical_h              = "4.712";

			// This node is needed by the Tegra framework.
			// All properties are set by the driver on runtime.
			//
			// If you want to use the GStreamer with nvarguscamerasrc
			// you have to adjust following settings:
			//   - pix_clk_hz
			//   - active_w, active_h, line_length
			//   - pixel_t
			mode0 {
				num_lanes                = NUM_LANES;
				tegra_sinterface         = "serial_a";
				phy_mode                 = "DPHY";

				discontinuous_clk        = "no";
				mclk_khz                 = "24000";
				// 182400000 => Image width is to long! (TEGRA_VI_CSI_ERROR_STATUS: 0x0001, port: 0)
				pix_clk_hz               = "801907200";
				cil_settletime           = "0";

				dpcm_enable              = "false";
				mclk_multiplier          = "9.33";

				inherent_gain            = "1";
				min_hdr_ratio            = "1";
				max_hdr_ratio            = "1";
				readout_orientation      = "0";

				active_w                 = "4032";
				active_h                 = "3040";
				line_length              = "4184";
				pixel_t                  = "bayer_rggb";

				gain_factor              = "1";
				min_gain_val             = "0";
				max_gain_val             = "100000";
				step_gain_val            = "1";
				default_gain             = "0";

				exposure_factor          = "1";
				min_exp_time             = "1";
				max_exp_time             = "100000000";
				step_exp_time            = "1";
				default_exp_time         = "10000";

				framerate_factor         = "1";
				min_framerate            = "0";
				max_framerate            = "1000";
				step_framerate           = "1";
				default_framerate        = "1000";

				embedded_metadata_height = "0";
			};

			ports {
				status="okay";
				#address-cells = <1>;
				#size-cells = <0>;
				port@0 {
					status="okay";
					reg = <0>;
					vc_mipi_out2: endpoint {
						status="okay";
						port-index = <2>;
						bus-width = <2>;
						remote-endpoint = <&vc_mipi_csi_in2>;
					};
				};
			};
		};
	};
#endif
#if VC_MIPI_CAM_F == 1
	i2c@c250000 {
		status="okay";
		vc_mipi_cam3: vc_mipi@1a {
			reg                     = <0x1a>;
               		status			= "okay";
	       		compatible              = "nvidia,vc_mipi";
			devnode                 = "video0";
			use_sensor_mode_id      = "false";

			num_lanes               = NUM_LANES;
			trigger_mode            = "0";
			flash_mode              = "0";

			// This settings are needed by the Tegra framework. 
			// They are used to calculate lens distortion.
			sensor_model            = "vc_mipi";
			physical_w              = "6.287";
			physical_h              = "4.712";

			// This node is needed by the Tegra framework.
			// All properties are set by the driver on runtime.
			//
			// If you want to use the GStreamer with nvarguscamerasrc
			// you have to adjust following settings:
			//   - pix_clk_hz
			//   - active_w, active_h, line_length
			//   - pixel_t
			mode0 {
				num_lanes                = NUM_LANES;
				tegra_sinterface         = "serial_a";
				phy_mode                 = "DPHY";

				discontinuous_clk        = "no";
				mclk_khz                 = "24000";
				// 182400000 => Image width is to long! (TEGRA_VI_CSI_ERROR_STATUS: 0x0001, port: 0)
				pix_clk_hz               = "801907200";
				cil_settletime           = "0";

				dpcm_enable              = "false";
				mclk_multiplier          = "9.33";

				inherent_gain            = "1";
				min_hdr_ratio            = "1";
				max_hdr_ratio            = "1";
				readout_orientation      = "0";

				active_w                 = "4032";
				active_h                 = "3040";
				line_length              = "4184";
				pixel_t                  = "bayer_rggb";

				gain_factor              = "1";
				min_gain_val             = "0";
				max_gain_val             = "100000";
				step_gain_val            = "1";
				default_gain             = "0";

				exposure_factor          = "1";
				min_exp_time             = "1";
				max_exp_time             = "100000000";
				step_exp_time            = "1";
				default_exp_time         = "10000";

				framerate_factor         = "1";
				min_framerate            = "0";
				max_framerate            = "1000";
				step_framerate           = "1";
				default_framerate        = "1000";

				embedded_metadata_height = "0";
			};

			ports {
				status="okay";
				#address-cells = <1>;
				#size-cells = <0>;
				port@0 {
					status="okay";
					reg = <0>;
					vc_mipi_out3: endpoint {
						status="okay";
						port-index = <3>;
						bus-width = <2>;
						remote-endpoint = <&vc_mipi_csi_in3>;
					};
				};
			};
		};
	};
#endif
	lens_vc_mipi@RBPCV2 {
		min_focus_distance  = "0.0";
		hyper_focal         = "0.0";
		focal_length        = "12.0";
		f_number            = "2.0";
		aperture            = "0.0";
	};
};
/ {
	tcp: tegra-camera-platform {
		compatible = "nvidia, tegra-camera-platform";
		
		num_csi_lanes = <NUM_CSI_LANES>;
		max_lane_speed = <1500000>;
		min_bits_per_pixel = <10>;
		vi_peak_byte_per_pixel = <2>;
		vi_bw_margin_pct = <25>;
		max_pixel_rate = <240000>;
		isp_peak_byte_per_pixel = <5>;
		isp_bw_margin_pct = <25>;

		modules {
			status="okay";
#if VC_MIPI_CAM_AB == 1
			cam_module0: module0 {
				status="okay";
				badge = "jakku_topleft_RBP194";
				position = "topleft";
				orientation = "1";
				cam_module0_drivernode0: drivernode0 {
					status="okay";
					pcl_id = "v4l2_sensor";
					devname = "imx219 2-001a";
					proc-device-tree = "/proc/device-tree/i2c@3180000/vc_mipi@1a";
				};
				cam_module0_drivernode1: drivernode1 {
					status="okay";
					pcl_id = "v4l2_lens";
					proc-device-tree = "/proc/device-tree/lens_vc_mipi@RBPCV2/";
				};
			};
#endif
#if VC_MIPI_CAM_CD == 1
			cam_module1: module1 {
				status="okay";
				badge = "jakku_topright_RBP194";
				position = "topright";
				orientation = "1";
				cam_module1_drivernode0: drivernode0 {
					status="okay";
					pcl_id = "v4l2_sensor";
					devname = "imx219 1-001a";
					proc-device-tree = "/proc/device-tree/i2c@c240000/vc_mipi@1a";
				};
				cam_module1_drivernode1: drivernode1 {
					status="okay";
					pcl_id = "v4l2_lens";
					proc-device-tree = "/proc/device-tree/lens_vc_mipi@RBPCV2/";
				};
			};
#endif
#if VC_MIPI_CAM_E == 1
			cam_module2: module2 {
				status="okay";
				badge = "jakku_bottomleft_RBP194";
				position = "bottomleft";
				orientation = "1";
				cam_module2_drivernode0: drivernode0 {
					status="okay";
					pcl_id = "v4l2_sensor";
					devname = "imx219 8-001a";
					proc-device-tree = "/proc/device-tree/i2c@31e0000/vc_mipi@1a";
				};
				cam_module2_drivernode1: drivernode1 {
					status="okay";
					pcl_id = "v4l2_lens";
					proc-device-tree = "/proc/device-tree/lens_vc_mipi@RBPCV2/";
				};
			};
#endif
#if VC_MIPI_CAM_F == 1
			cam_module3: module3 {
				status="okay";
				badge = "jakku_bottomright_RBP194";
				position = "bottomright";
				orientation = "1";
				cam_module3_drivernode0: drivernode0 {
					status="okay";
					pcl_id = "v4l2_sensor";
					devname = "imx219 7-001a";
					proc-device-tree = "/proc/device-tree/i2c@c250000/vc_mipi@1a";
				};
				cam_module3_drivernode1: drivernode1 {
					status="okay";
					pcl_id = "v4l2_lens";
					proc-device-tree = "/proc/device-tree/lens_vc_mipi@RBPCV2/";
				};
			};
#endif
		};
	};
};

#define CAM0_PWDN	    	TEGRA194_MAIN_GPIO(P, 5)
#define CAM1_PWDN	    	TEGRA194_MAIN_GPIO(P, 4)
#define CAM2_PWDN		TEGRA194_MAIN_GPIO(Q, 5)
#define CAM3_PWDN	        TEGRA194_MAIN_GPIO(Q, 6)

#define CAM_I2C_MUX 	   	TEGRA194_AON_GPIO(CC, 3)
#define CAM0_IMX219_PWDN    	TEGRA194_MAIN_GPIO(Y, 3)
#define CAM1_IMX219_PWDN    	TEGRA194_MAIN_GPIO(Y, 2)

/ {
	/delete-node/ cam_i2cmux;

#if VC_MIPI_CAM_AB == 1
	i2c@3180000 {
		status="okay";
		vc_mipi@1a {
			status = "okay";
			reset-gpios = <&tegra_main_gpio CAM0_PWDN GPIO_ACTIVE_HIGH>;
		};
	};
#endif
#if VC_MIPI_CAM_CD == 1
	i2c@c240000 {
		status="okay";
		vc_mipi@1a {
			status = "okay";
			reset-gpios = <&tegra_main_gpio CAM1_PWDN GPIO_ACTIVE_HIGH>;
		};
	};
#endif
#if VC_MIPI_CAM_E == 1
	i2c@31e0000 {
		status="okay";
		vc_mipi@1a {
			status = "okay";
			reset-gpios = <&tegra_main_gpio CAM3_PWDN GPIO_ACTIVE_HIGH>;
		};
	};
#endif
#if VC_MIPI_CAM_F == 1
	i2c@c250000 {
		status="okay";
		vc_mipi@1a {
			status = "okay";
			reset-gpios = <&tegra_main_gpio CAM2_PWDN GPIO_ACTIVE_HIGH>;
		};
	};
#endif
	pinmux@2430000 {
		pinmux_default: common {
			soc_gpio44_pr0 {
				nvidia,pins = "soc_gpio44_pr0";
				nvidia,function = "rsvd2";
				nvidia,pull = <TEGRA_PIN_PULL_UP>;
				nvidia,tristate = <TEGRA_PIN_DISABLE>;
				nvidia,enable-input = <TEGRA_PIN_DISABLE>;
				nvidia,io-high-voltage = <TEGRA_PIN_DISABLE>;
				nvidia,lpdr = <TEGRA_PIN_DISABLE>;
			};
		};
	};

	gpio@2200000 {
		camera-trigger-high {
			status = "okay";
			gpio-hog;
			output-high;
			gpios = <TEGRA194_MAIN_GPIO(R, 0) 0>;
			label = "cam-trigger";
		};
	};
};