/*
 * Copyright (c) 2020-2021, Vision Components GmbH.  All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <dt-bindings/media/camera.h>
#include <dt-bindings/platform/t210/t210.h>

// ------------------------------------------------------------------------------------------------
//  Driver Configuration for NVIDIA Jetson Nano 4GB/2GB on NVIDIA Jetson Nano Developer Kit
// ------------------------------------------------------------------------------------------------
#define VC_MIPI_CAM_0       1   // 1: Enabled, 0: Disabled  (serial_a => CSI Port 0 => VI Stream 0)
#define VC_MIPI_CAM_1       0   // 1: Enabled, 0: Disabled  (serial_e => CSI Port 4 => VI Stream 4)
// ------------------------------------------------------------------------------------------------
//  Supported number of lanes
// -----+------------------------------------------------------------------------------------------
//  1   | OV7251, IMX296, IMX297
//  2   | OV9281, IMX264, IMX265
//  2,4 | IMX178, IMX183, IMX226, IMX250, IMX252, IMX273, IMX290, IMX327, IMX335, IMX392, 
//      | IMX412, IMX415, IMX568
// -----+------------------------------------------------------------------------------------------
#define VC_MIPI_LANES       2   // 1, 2 Lanes
// ------------------------------------------------------------------------------------------------
//   Sensor Manufacturer
// -----+------------------------------------------------------------------------------------------
//   1  | Sony Sensor (IMX)
//   2  | Omni Vision Sensor (OV)
// -----+------------------------------------------------------------------------------------------
#define VC_MIPI_MANUFACTURER 1
// ------------------------------------------------------------------------------------------------
//  GStreamer Support
// ------------------------------------------------------------------------------------------------
//  If you want to use GStreamer with nvarguscamerasrc you have to adjust this settings in the 
//  device tree below.
//
//   +--------+------------+------------+-------------+-------------+-------------------+
//   | Camera | physical_w | physical_h | active_w    | active_h    | <pixelformat>     |
//   |        |            |            | line_length |             | see next table    |
//   +--------+------------+------------+-------------+-------------+----+----+----+----+
//   | V4LAPI |      1.000 |      1.000 |        1024 |         768 |    | 10 |    |    |
//   | IMX178 |      7.430 |      4.992 |        3072 |        2048 | 08 | 10 | 12 | 14 |
//   | IMX183 |     13.305 |      8.865 |        5440 |        3648 |    | 10 | 12 |    |
//   | IMX226 |      7.533 |      5.635 |        3904 |        3000 | 08 | 10 | 12 |    |
//   | IMX250 |      8.446 |      7.066 |        2432 |        2048 | 08 | 10 | 12 |    |
//   | IMX252 |      7.066 |      5.299 |        2048 |        1536 | 08 | 10 | 12 |    |
//   | IMX264 |      8.390 |      7.066 |        2432 |        2048 | 08 | 10 | 12 |    |
//   | IMX265 |      7.065 |      5.299 |        2048 |        1536 | 08 | 10 | 12 |    |
//   | IMX273 |      4.970 |      3.726 |        1440 |        1080 | 08 | 10 | 12 |    |
//   | IMX290 |      5.617 |      3.181 |        1920 |        1080 |    | 10 | 12 |    |
//   | IMX296 |      4.968 |      3.726 |        1440 |        1080 |    | 10 |    |    |
//   | IMX297 |      4.968 |      3.726 |         720 |         540 |    | 10 |    |    |
//   | IMX327 |      5.617 |      3.181 |        1920 |        1080 |    | 10 | 12 |    |
//   | IMX335 |      5.120 |      3.928 |        2560 |        1944 |    | 10 | 12 |    |
//   | IMX392 |      6.679 |      4.195 |        1920 |        1200 | 08 | 10 | 12 |    |
//   | IMX412 |      6.287 |      4.712 |        4032 |        3040 |    | 10 |    |    |
//   | IMX415 |      5.602 |      3.155 |        3840 |        2160 |    | 10!|    |    |
//   | IMX568 |      6.773 |      5.655 |        2464 |        2048 | 08 | 10 | 12 |    |
//   | OV7281 |      1.920 |      1.440 |         640 |         480 | 08 | 10 |    |    |
//   | OV9281 |      3.840 |      2.400 |        1280 |         800 | 08 | 10 |    |    |
//   +--------+------------+------------+-------------+-------------+-------------------+
//
//   NOTE: 10! substitute rggb with gbrg for the IMX415
//   +---------------+--------------+-----------+-------------+---------------------+
//   | <pixelformat> | pixel_t      | mode_type | pixel_phase | csi_pixel_bit_depth |
//   +---------------+--------------+-----------+-------------+---------------------+
//   |            08 | bayer_rggb8  | bayer     | rggb        | 8                   |
//   |            10 | bayer_rggb   | bayer     | rggb        | 10                  |
//   |            12 | bayer_rggb12 | bayer     | rggb        | 12                  |
//   |            14 |                - not supported yet -                         |
//   +---------------+--------------+-----------+-------------+---------------------+
//
// ------------------------------------------------------------------------------------------------

#define VC_MIPI_METADATA_H  "0"

#if VC_MIPI_LANES == 1
    #define BUS_WIDTH 1
    #define NUM_LANES "1" 
    #define NUM_CSI_LANES 2
#endif
#if VC_MIPI_LANES == 2
    #define BUS_WIDTH 2
    #define NUM_LANES "2" 
    #define NUM_CSI_LANES 4
#endif

#if VC_MIPI_CAM_0 == 1 && VC_MIPI_CAM_1 == 1
    #define VC_MIPI_CAMERAS 2
#else
    #define VC_MIPI_CAMERAS 1
#endif

/ {
    host1x {
        vc_vi_base: vi {
            num-channels = <VC_MIPI_CAMERAS>;
            ports {
                #address-cells = <1>;
                #size-cells = <0>;
#if VC_MIPI_CAM_0 == 1
                vc_vi_port0: port@0 {
                    reg = <0>;
                    vc_vi_in0: endpoint {
                        port-index = <0>;
                        bus-width = <BUS_WIDTH>;
                        remote-endpoint = <&vc_csi_out0>;
                    };
                };
#endif
#if VC_MIPI_CAM_1 == 1
                vc_vi_port1: port@1 {
                    reg = <1>;
                    vc_vi_in1: endpoint {
                        port-index = <4>;
                        bus-width = <BUS_WIDTH>;
                        remote-endpoint = <&vc_csi_out1>;
                    };
                };
#endif
            };
        };

        vc_csi_base: nvcsi {
            num-channels = <VC_MIPI_CAMERAS>;
            #address-cells = <1>;
            #size-cells = <0>;
#if VC_MIPI_CAM_0 == 1
            vc_csi_chan0: channel@0 {
                reg = <0>;
                ports {
                    #address-cells = <1>;
                    #size-cells = <0>;
                    vc_csi_chan0_port0: port@0 {
                        reg = <0>;
                        vc_csi_in0: endpoint@0 {
                            port-index = <0>;
                            bus-width = <BUS_WIDTH>;
                            remote-endpoint = <&vc_mipi_out0>;
                        };
                    };
                    vc_csi_chan0_port1: port@1 {
                        reg = <1>;
                        vc_csi_out0: endpoint@1 {
                            remote-endpoint = <&vc_vi_in0>;
                        };
                    };
                };
            };
#endif
#if VC_MIPI_CAM_1 == 1
            vc_csi_chan1: channel@1 {
                reg = <1>;
                ports {
                    #address-cells = <1>;
                    #size-cells = <0>;
                    vc_csi_chan1_port0: port@0 {
                        reg = <0>;
                        vc_csi_in1: endpoint@2 {
                            port-index = <4>;
                            bus-width = <BUS_WIDTH>;
                            remote-endpoint = <&vc_mipi_out1>;
                        };
                    };
                    vc_csi_chan1_port1: port@1 {
                        reg = <1>;
                        vc_csi_out1: endpoint@3 {
                            remote-endpoint = <&vc_vi_in1>;
                        };
                    };
                };
            };
#endif
        };
    };

    cam_i2cmux {
#if VC_MIPI_CAM_0 == 1
        i2c@0 {
#if VC_MIPI_MANUFACTURER == 1
            vc_mipi_cam0: vc_mipi@1a {
                reg                     = <0x1a>;
#else
            vc_mipi_cam0: vc_mipi@60 {
                reg                     = <0x60>;
#endif
                compatible              = "nvidia,vc_mipi";
                devnode                 = "video0";
                use_sensor_mode_id      = "false";
                sensor_model            = "vc_mipi";

                num_lanes               = NUM_LANES;
                trigger_mode            = "0";
                flash_mode              = "0";

                // ----------------------------------------------------
                // If you want to use GStreamer with nvarguscamerasrc
                // you have to adjust this settings
                physical_w              = "1.000";
                physical_h              = "1.000";
                // ----------------------------------------------------

                // This node is needed by the Tegra framework.
                // You don't have to change any settings if just want to use the V4L API.
                mode0 {
                    num_lanes                = NUM_LANES;
                    tegra_sinterface         = "serial_a";
                    embedded_metadata_height = VC_MIPI_METADATA_H;
                    readout_orientation      = "0";

                    // ----------------------------------------------------
                    // If you want to use GStreamer with nvarguscamerasrc
                    // you have to adjust this settings. 
                    active_w                 = "1024";
                    active_h                 = "768";
                    line_length              = "1024";
                    pixel_t                  = "bayer_rggb";
                    mode_type                = "bayer";
                    pixel_phase              = "rggb";
                    csi_pixel_bit_depth      = "10";
                    // ----------------------------------------------------

                    gain_factor              = "1";
                    min_gain_val             = "1";
                    max_gain_val             = "64";
                    step_gain_val            = "1";
                    default_gain             = "1";
                    inherent_gain            = "1";

                    exposure_factor          = "1000";
                    min_exp_time             = "1000000";
                    max_exp_time             = "150000000";
                    step_exp_time            = "1000000";
                    default_exp_time         = "10000000";

                    framerate_factor         = "1";
                    min_framerate            = "1";
                    max_framerate            = "1000";
                    step_framerate           = "1";
                    default_framerate        = "1000";

                    min_hdr_ratio            = "1";
                    max_hdr_ratio            = "1";

                    phy_mode                 = "DPHY";
                    discontinuous_clk        = "no";
                    mclk_khz                 = "24000";
                    pix_clk_hz               = "800000000";
                    mclk_multiplier          = "9.33";
                    cil_settletime           = "0";
                    dpcm_enable              = "false";
                };

                ports {
                    #address-cells = <1>;
                    #size-cells = <0>;
                    port@0 {
                        reg = <0>;
                        vc_mipi_out0: endpoint {
                            port-index = <0>;
                            bus-width = <BUS_WIDTH>;
                            remote-endpoint = <&vc_csi_in0>;
                        };
                    };
                };
            };
        };
#endif
#if VC_MIPI_CAM_1 == 1
        i2c@1 {
#if VC_MIPI_MANUFACTURER == 1
            vc_mipi_cam1: vc_mipi@1a {
                reg                     = <0x1a>;
#else
            vc_mipi_cam1: vc_mipi@60 {
                reg                     = <0x60>;
#endif
                compatible              = "nvidia,vc_mipi";
                devnode                 = "video1";
                use_sensor_mode_id      = "false";
                sensor_model            = "vc_mipi";

                num_lanes               = NUM_LANES;
                trigger_mode            = "0";
                flash_mode              = "0";

                // ----------------------------------------------------
                // If you want to use GStreamer with nvarguscamerasrc
                // you have to adjust this settings
                physical_w              = "1.000";
                physical_h              = "1.000";
                // ----------------------------------------------------

                // This node is needed by the Tegra framework.
                // You don't have to change any settings if just want to use the V4L API.
                mode0 {
                    num_lanes                = NUM_LANES;
                    tegra_sinterface         = "serial_e";
                    embedded_metadata_height = VC_MIPI_METADATA_H;
                    readout_orientation      = "0";

                    // ----------------------------------------------------
                    // If you want to use GStreamer with nvarguscamerasrc
                    // you have to adjust this settings. 
                    active_w                 = "1024";
                    active_h                 = "768";
                    line_length              = "1024";
                    pixel_t                  = "bayer_rggb";
                    mode_type                = "bayer";
                    pixel_phase              = "rggb";
                    csi_pixel_bit_depth      = "10";
                    // ----------------------------------------------------

                    gain_factor              = "1";
                    min_gain_val             = "1";
                    max_gain_val             = "64";
                    step_gain_val            = "1";
                    default_gain             = "1";
                    inherent_gain            = "1";

                    exposure_factor          = "1000";
                    min_exp_time             = "1000000";
                    max_exp_time             = "150000000";
                    step_exp_time            = "1000000";
                    default_exp_time         = "10000000";

                    framerate_factor         = "1";
                    min_framerate            = "1";
                    max_framerate            = "1000";
                    step_framerate           = "1";
                    default_framerate        = "1000";

                    min_hdr_ratio            = "1";
                    max_hdr_ratio            = "1";

                    phy_mode                 = "DPHY";
                    discontinuous_clk        = "no";
                    mclk_khz                 = "24000";
                    pix_clk_hz               = "800000000";
                    mclk_multiplier          = "9.33";
                    cil_settletime           = "0";
                    dpcm_enable              = "false";
                };

                ports {
                    #address-cells = <1>;
                    #size-cells = <0>;
                    port@0 {
                        reg = <0>;
                        vc_mipi_out1: endpoint {
                            port-index = <4>;
                            bus-width = <BUS_WIDTH>;
                            remote-endpoint = <&vc_csi_in1>;
                        };
                    };
                };
            };
        };
#endif
    };

    lens@vc_mipi {
        min_focus_distance  = "0.0";
        hyper_focal         = "0.0";
        focal_length        = "6.0";
        f_number            = "2.0";
        aperture            = "0.0";
    };
};

/ {
    tcp: tegra-camera-platform {
        compatible = "nvidia, tegra-camera-platform";

        num_csi_lanes = <NUM_CSI_LANES>;
        max_lane_speed = <1500000>;
        min_bits_per_pixel = <10>;
        vi_peak_byte_per_pixel = <2>;
        vi_bw_margin_pct = <25>;
        max_pixel_rate = <240000>;
        isp_peak_byte_per_pixel = <5>;
        isp_bw_margin_pct = <25>;

        modules {
#if VC_MIPI_CAM_0 == 1
            cam_module0: module0 {
                status = "okay";
                badge = "porg_front_vc_mipi";
                position = "front";
                orientation = "1";
                cam_module0_drivernode0: drivernode0 {
                    status = "okay";
                    pcl_id = "v4l2_sensor";
#if VC_MIPI_MANUFACTURER == 1
                    devname = "vc_mipi 7-001a";
                    proc-device-tree = "/proc/device-tree/cam_i2cmux/i2c@0/vc_mipi@1a";
#else
                    devname = "vc_mipi 7-0060";
                    proc-device-tree = "/proc/device-tree/cam_i2cmux/i2c@0/vc_mipi@60";
#endif
                };
                cam_module0_drivernode1: drivernode1 {
                    status = "okay";
                    pcl_id = "v4l2_lens";
                    proc-device-tree = "/proc/device-tree/lens@vc_mipi/";
                };
            };
#endif
#if VC_MIPI_CAM_1 == 1
            cam_module1: module1 {
                status = "okay";
                badge = "porg_rear_vc_mipi";
                position = "rear";
                orientation = "1";
                cam_module1_drivernode0: drivernode0 {
                    status = "okay";
                    pcl_id = "v4l2_sensor";
#if VC_MIPI_MANUFACTURER == 1
                    devname = "vc_mipi 8-001a";
                    proc-device-tree = "/proc/device-tree/cam_i2cmux/i2c@1/vc_mipi@1a";
#else
                    devname = "vc_mipi 8-0060";
                    proc-device-tree = "/proc/device-tree/cam_i2cmux/i2c@1/vc_mipi@60";
#endif
                };
                cam_module1_drivernode1: drivernode1 {
                    status = "okay";
                    pcl_id = "v4l2_lens";
                    proc-device-tree = "/proc/device-tree/lens@vc_mipi/";
                };
            };
#endif
        };
    };
};

#define CAM1_PWDN     TEGRA_GPIO(S, 7)
#define CAM2_PWDN     TEGRA_GPIO(T, 0)
#define CAM_I2C_MUX   TEGRA_GPIO(I, 0)

/ {
    cam_i2cmux {
        status = "okay";
        compatible = "i2c-mux-gpio";
        #address-cells = <1>;
        #size-cells = <0>;
        mux-gpios = <&gpio CAM_I2C_MUX GPIO_ACTIVE_HIGH>;
        i2c-parent = <&i2c7>;
#if VC_MIPI_CAM_0 == 1
        i2c@0 {
            status = "okay";
            reg = <0>;
            #address-cells = <1>;
            #size-cells = <0>;
#if VC_MIPI_MANUFACTURER == 1
            vc_mipi@60 {
#else
            vc_mipi@1a {
#endif
                status = "okay";
                reset-gpios = <&gpio CAM1_PWDN GPIO_ACTIVE_HIGH>;
            };
        };
#endif
#if VC_MIPI_CAM_1 == 1
        i2c@1 {
            status = "okay";
            reg = <1>;
            #address-cells = <1>;
            #size-cells = <0>;
#if VC_MIPI_MANUFACTURER == 1
            vc_mipi@60 {
#else
            vc_mipi@1a {
#endif
                status = "okay";
                reset-gpios = <&gpio CAM2_PWDN GPIO_ACTIVE_HIGH>;
            };
        };
#endif
    };

    gpio@6000d000 {
        camera-control-output-low {
            gpio-hog;
            output-low;
            gpios = <CAM1_PWDN 0 CAM2_PWDN 0>;
            label = "cam1-pwdn", "cam2-pwdn";
        };
    };
};